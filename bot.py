import os
import re
import json
import asyncio
import logging
from datetime import datetime, timezone, timedelta

import aiohttp
from aiohttp import web
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)

# ---------- –±–∞–∑–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ----------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s: %(message)s"
)
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

BINANCE_PREMIUM = "https://fapi.binance.com/fapi/v1/premiumIndex"

# ---------- —É—Ç–∏–ª—ñ—Ç–∏ ----------
def parse_interval(text: str) -> int | None:
    """'30s'->30, '30m'->1800, '1h'->3600"""
    m = re.fullmatch(r"\s*(\d+)\s*([smhSMH])\s*", text)
    if not m:
        return None
    n = int(m.group(1))
    unit = m.group(2).lower()
    return n if unit == "s" else n * 60 if unit == "m" else n * 3600

async def fetch_binance(symbol: str):
    url = BINANCE_PREMIUM
    params = {"symbol": symbol.upper()}
    async with aiohttp.ClientSession() as s:
        async with s.get(url, params=params, timeout=12) as r:
            r.raise_for_status()
            data = await r.json()
    rate = float(data.get("lastFundingRate") or data.get("fundingRate") or 0.0)
    # Kyiv = UTC+3 —É –ø—Ä–∏–∫–ª–∞–¥—ñ (—Å–ø—Ä–æ—Å—Ç–∏–º–æ –±–µ–∑ zoneinfo)
    next_dt = datetime.fromtimestamp(int(data["nextFundingTime"]) / 1000, tz=timezone.utc) + timedelta(hours=3)
    return symbol.upper(), rate, next_dt

# ---------- –∫–æ–º–∞–Ω–¥–∏ ----------
async def start(update: Update, _: ContextTypes.DEFAULT_TYPE):
    text = (
        "üëã –ü—Ä–∏–≤—ñ—Ç!\n\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "‚Ä¢ /rate SYMBOL ‚Äî –ø–æ—Ç–æ—á–Ω–∏–π funding –∑ Binance (–Ω–∞–ø—Ä. /rate BTCUSDT)\n"
        "‚Ä¢ /alarm SYMBOL INTERVAL ‚Äî –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è (–Ω–∞–ø—Ä. /alarm ENSUSDT 30m)\n"
        "‚Ä¢ /stopalarm [SYMBOL] ‚Äî –∑—É–ø–∏–Ω–∏—Ç–∏ –≤—Å—ñ –∞–±–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –∞–ª–∞—Ä–º\n"
        "\n–Ü–Ω—Ç–µ—Ä–≤–∞–ª–∏: 10s, 30m, 1h\n"
    )
    await update.message.reply_text(text)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

async def rate_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /rate BTCUSDT")
        return
    symbol = context.args[0]
    try:
        sym, rate, next_dt = await fetch_binance(symbol)
        await update.message.reply_text(
            f"üìå {sym}\nFunding: {rate*100:.6f}% ({rate:.10f})\n"
            f"Next (Kyiv): {next_dt:%Y-%m-%d %H:%M:%S}"
        )
    except Exception as e:
        logging.exception("rate_cmd error")
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")

# ----- alarm -----
async def alarm_tick(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    symbol = context.job.data["symbol"]
    try:
        sym, rate, next_dt = await fetch_binance(symbol)
        await context.bot.send_message(
            chat_id,
            f"‚è∞ Funding update\nüìå {sym}\nFunding: {rate*100:.6f}% ({rate:.10f})\n"
            f"Next (Kyiv): {next_dt:%Y-%m-%d %H:%M:%S}"
        )
    except Exception as e:
        logging.exception("alarm_tick error")
        await context.bot.send_message(chat_id, f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è funding –¥–ª—è {symbol}: {e}")

async def alarm_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /alarm SYMBOL INTERVAL (–Ω–∞–ø—Ä. /alarm BTCUSDT 30m)")
        return
    symbol = context.args[0].upper()
    seconds = parse_interval(context.args[1])
    if not seconds:
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª. –î–æ—Å—Ç—É–ø–Ω–æ: 10s, 30m, 1h")
        return

    jq = context.application.job_queue
    name = f"{update.effective_chat.id}:{symbol}"
    # –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π, —è–∫—â–æ –±—É–≤
    for j in jq.get_jobs_by_name(name):
        j.schedule_removal()

    jq.run_repeating(
        alarm_tick,
        interval=seconds,
        first=0,  # –æ–¥—Ä–∞–∑—É –ø–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        chat_id=update.effective_chat.id,
        name=name,
        data={"symbol": symbol},
    )
    await update.message.reply_text(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –∞–ª–∞—Ä–º –¥–ª—è {symbol} –∫–æ–∂–Ω—ñ {context.args[1]}.\n–ó—É–ø–∏–Ω–∫–∞: /stopalarm {symbol}")

async def stopalarm_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    jq = context.application.job_queue
    if context.args:
        symbol = context.args[0].upper()
        name = f"{update.effective_chat.id}:{symbol}"
        jobs = jq.get_jobs_by_name(name)
        for j in jobs:
            j.schedule_removal()
        msg = f"üõë –ó—É–ø–∏–Ω–µ–Ω–æ –∞–ª–∞—Ä–º –¥–ª—è {symbol}." if jobs else f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–ª–∞—Ä–º—É –¥–ª—è {symbol}."
    else:
        # –∑—É–ø–∏–Ω–∏—Ç–∏ –≤—Å—ñ –¥–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É
        cnt = 0
        for j in list(jq.jobs()):
            if j.name and str(update.effective_chat.id) in j.name:
                j.schedule_removal()
                cnt += 1
        msg = f"üõë –ó—É–ø–∏–Ω–µ–Ω–æ {cnt} –∞–ª–∞—Ä–º(–∏)." if cnt else "–ê–∫—Ç–∏–≤–Ω–∏—Ö –∞–ª–∞—Ä–º—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    await update.message.reply_text(msg)

# ---------- Telegram runtime (–±–µ–∑ run_polling) ----------
async def run_telegram_app():
    if not TELEGRAM_TOKEN:
        raise SystemExit("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–æ –≤ .env/Env Vars")
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("rate", rate_cmd))
    app.add_handler(CommandHandler("alarm", alarm_cmd))
    app.add_handler(CommandHandler("stopalarm", stopalarm_cmd))

    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    logging.info("‚úÖ Telegram bot started (polling).")
    await asyncio.Future()  # –Ω—ñ–∫–æ–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è

# ---------- –ü—Ä–æ—Å—Ç–∏–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ----------
async def run_web_server():
    async def ok(_):
        return web.Response(text="OK")
    webapp = web.Application()
    webapp.router.add_get("/", ok)
    webapp.router.add_get("/healthz", ok)

    # PORT –º–∞—î –±—É—Ç–∏ –∑–∞–¥–∞–Ω–∏–π Render'–æ–º; –Ω–µ —Å—Ç–∞–≤–∏–º–æ –¥–µ—Ñ–æ–ª—Ç
    port = int(os.environ["PORT"])
    runner = web.AppRunner(webapp)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    logging.info(f"‚úÖ Web server is listening on 0.0.0.0:{port}")
    await asyncio.Future()  # –Ω—ñ–∫–æ–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è

# ---------- –ì–æ–ª–æ–≤–Ω–∏–π –∑–∞–ø—É—Å–∫ ----------
async def main():
    # 1) –°–ø–æ—á–∞—Ç–∫—É –ø—ñ–¥–Ω—ñ–º–∞—î–º–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä, —â–æ–± Render –ø–æ–±–∞—á–∏–≤ –ø–æ—Ä—Ç
    web_task = asyncio.create_task(run_web_server())
    await asyncio.sleep(1)
    # 2) –ü–æ—Ç—ñ–º –∑–∞–ø—É—Å–∫–∞—î–º–æ Telegram-–±–æ—Ç–∞
    await run_telegram_app()
    await web_task

if __name__ == "__main__":
    asyncio.run(main())
