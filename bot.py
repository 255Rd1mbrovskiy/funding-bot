import os
import re
import asyncio
import logging
from datetime import datetime, timezone, timedelta
import difflib

import aiohttp
from aiohttp import web, ClientResponseError
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# ---------- –õ–û–ì–ò + –¢–û–ö–ï–ù ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(name)s: %(message)s")
# –ø—Ä–∏–≥–ª—É—à–∏–º–æ —à—É–º –≤—ñ–¥ —Å—Ç–æ—Ä–æ–Ω–Ω—ñ—Ö –±—ñ–±–ª—ñ–æ—Ç–µ–∫
for name in ["telegram", "telegram.ext", "httpx", "aiohttp", "urllib3", "asyncio"]:
    logging.getLogger(name).setLevel(logging.WARNING)

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# ---------- ENDPOINTS ----------
BINANCE_PREMIUM = "https://fapi.binance.com/fapi/v1/premiumIndex"
FUTURES_24H     = "https://fapi.binance.com/fapi/v1/ticker/24hr"
EXCHANGE_INFO   = "https://fapi.binance.com/fapi/v1/exchangeInfo"

# ---------- –í–ê–õ–Ü–î–ê–¶–Ü–Ø –°–ò–ú–í–û–õ–Ü–í (PERPETUAL) ----------
_futures_symbols: set[str] = set()  # PERPETUAL & TRADING

async def load_futures_symbols():
    """–ö–∞—á–∞—î —Å–ø–∏—Å–æ–∫ –≤–∞–ª—ñ–¥–Ω–∏—Ö —Ñ‚Äô—é—á–µ—Ä—Å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ —É –∫–µ—à."""
    global _futures_symbols
    try:
        async with aiohttp.ClientSession() as s:
            async with s.get(EXCHANGE_INFO, timeout=15) as r:
                r.raise_for_status()
                info = await r.json()
        syms = set()
        for sdef in info.get("symbols", []):
            if sdef.get("contractType") == "PERPETUAL" and sdef.get("status") == "TRADING":
                syms.add(sdef["symbol"].upper())
        _futures_symbols = syms
        logging.info(f"Loaded futures symbols: {len(_futures_symbols)}")
    except Exception as e:
        logging.warning(f"load_futures_symbols error: {e}")

async def validate_symbol(sym: str) -> tuple[bool, str | None]:
    """True, None —è–∫—â–æ —Å–∏–º–≤–æ–ª –≤–∞–ª—ñ–¥–Ω–∏–π; —ñ–Ω–∞–∫—à–µ False —ñ –ø—ñ–¥–∫–∞–∑–∫–∞."""
    if not _futures_symbols:
        await load_futures_symbols()
    u = sym.upper()
    if u in _futures_symbols:
        return True, None
    hint = difflib.get_close_matches(u, list(_futures_symbols), n=1, cutoff=0.6)
    return False, (hint[0] if hint else None)

# ---------- –£–¢–ò–õ–Ü–¢–ò ----------
def parse_interval(text: str) -> int | None:
    """'30s'->30, '30m'->1800, '1h'->3600"""
    m = re.fullmatch(r"\s*(\d+)\s*([smhSMH])\s*", text)
    if not m:
        return None
    n = int(m.group(1))
    unit = m.group(2).lower()
    return n if unit == "s" else n * 60 if unit == "m" else n * 3600

async def fetch_binance(symbol: str):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î: (SYMBOL, funding_rate_decimal, next_dt_kyiv, mark_price)
    –õ–æ–≤–∏—Ç—å 400/429/5xx —ñ –∫–∏–¥–∞—î —á–∏—Ç–∞–±–µ–ª—å–Ω–µ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è.
    """
    params = {"symbol": symbol.upper()}
    async with aiohttp.ClientSession() as s:
        try:
            async with s.get(BINANCE_PREMIUM, params=params, timeout=12) as r:
                r.raise_for_status()
                data = await r.json()
        except ClientResponseError as e:
            # 400 –∑–∞–∑–≤–∏—á–∞–π –±—É–≤–∞—î –ø—Ä–∏ –Ω–µ–≤–∞–ª—ñ–¥–Ω–æ–º—É —Å–∏–º–≤–æ–ª—ñ –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–º—É —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ
            if e.status == 400:
                raise ValueError("Binance –≤—ñ–¥–ø–æ–≤—ñ–≤ 400 (Bad Request) ‚Äî –π–º–æ–≤—ñ—Ä–Ω–æ, —Å–∏–º–≤–æ–ª –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –Ω–∞ Futures.") from e
            raise
    rate = float(data.get("lastFundingRate") or data.get("fundingRate") or 0.0)
    # –ö–∏—ó–≤ = UTC+3 (—Å–ø—Ä–æ—â–µ–Ω–æ, –±–µ–∑ zoneinfo)
    next_dt = datetime.fromtimestamp(int(data["nextFundingTime"]) / 1000, tz=timezone.utc) + timedelta(hours=3)
    mark_price = float(data.get("markPrice") or 0.0)
    return symbol.upper(), rate, next_dt, mark_price

async def fetch_futures_24h(symbol: str):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î: (last_price, change_pct) –¥–ª—è USDT-–º–∞—Ä–∂–∏–Ω —Ñ‚Äô—é—á–µ—Ä—Å—ñ–≤.
    """
    params = {"symbol": symbol.upper()}
    async with aiohttp.ClientSession() as s:
        async with s.get(FUTURES_24H, params=params, timeout=12) as r:
            r.raise_for_status()
            data = await r.json()
    last = float(data.get("lastPrice") or 0.0)
    chg = float(data.get("priceChangePercent") or 0.0)  # —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö
    return last, chg

# ---------- –ö–û–ú–ê–ù–î–ò ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üëã –ü—Ä–∏–≤—ñ—Ç!\n\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "‚Ä¢ /rate SYMBOL ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π funding –∑ Binance\n"
        "   –ø—Ä–∏–∫–ª–∞–¥–∏: /rate BTCUSDT, /rate ENSUSDT, /rate 0GUSDT\n"
        "‚Ä¢ /alarm SYMBOL INTERVAL ‚Äî –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ funding —Ä–µ–≥—É–ª—è—Ä–Ω–æ\n"
        "   –ø—Ä–∏–∫–ª–∞–¥–∏: /alarm ENSUSDT 30m, /alarm BTCUSDT 1h, /alarm ETHUSDT 45s\n"
        "‚Ä¢ /stopalarm [SYMBOL] ‚Äî –∑—É–ø–∏–Ω–∏—Ç–∏ –≤—Å—ñ –∞–±–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –∞–ª–∞—Ä–º\n"
        "\n–§–æ—Ä–º–∞—Ç–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤: 10s, 30m, 1h\n"
        "‚ö†Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–∞–º–µ Binance Futures (PERPETUAL). –Ø–∫—â–æ –º–æ–Ω–µ—Ç–∞ –ª–∏—à–µ –Ω–∞ Spot ‚Äî —Ñ–∞–Ω–¥—ñ–Ω–≥—É –Ω–µ–º–∞—î."
    )
    await update.message.reply_text(text)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

async def rate_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /rate BTCUSDT")
        return
    symbol = context.args[0].upper()

    ok, hint = await validate_symbol(symbol)
    if not ok:
        msg = (f"‚ùå –ù–∞ Binance Futures (PERPETUAL) —Å–∏–º–≤–æ–ª **{symbol}** –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n"
               f"–ú–æ–∂–ª–∏–≤–æ, –º–æ–Ω–µ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –Ω–∞ Spot (—Ñ–∞–Ω–¥—ñ–Ω–≥—É –Ω–µ–º–∞—î).")
        if hint:
            msg += f"\n–ú–æ–∂–ª–∏–≤–æ, —Ç–∏ –º–∞–≤ –Ω–∞ —É–≤–∞–∑—ñ: `{hint}`"
        await update.message.reply_text(msg, parse_mode="Markdown")
        return

    try:
        sym, rate, next_dt, mark = await fetch_binance(symbol)
        last, chg = await fetch_futures_24h(sym)
        price = last or mark
        arrow = "üî∫" if chg >= 0 else "üîª"
        await update.message.reply_text(
            f"üìå {sym}\n"
            f"Funding: {rate*100:.6f}% ({rate:.10f})\n"
            f"Next (Kyiv): {next_dt:%Y-%m-%d %H:%M:%S}\n"
            f"Price: ${price:,.4f}\n"
            f"24h: {arrow} {chg:.2f}%"
        )
    except ValueError as e:
        # –Ω–∞—à –¥—Ä—É–∂–Ω—ñ–π —Ç–µ–∫—Å—Ç –ø—Ä–∏ 400 Bad Request —Ç–æ—â–æ
        await update.message.reply_text(
            f"‚ö†Ô∏è {e}\n(–°–∏–º–≤–æ–ª '{symbol}' —î —É —Å–ø–∏—Å–∫—É PERPETUAL? –°–ø—Ä–æ–±—É–π –±–ª–∏–∑—å–∫–∏–π: "
            f"{hint or '–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ BTCUSDT'})"
        )
    except Exception as e:
        logging.exception("rate_cmd error")
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")

# ----- –∞–ª–∞—Ä–º–∏ -----
async def alarm_tick(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    symbol = context.job.data["symbol"]
    try:
        sym, rate, next_dt, mark = await fetch_binance(symbol)
        last, chg = await fetch_futures_24h(sym)
        price = last or mark
        arrow = "üî∫" if chg >= 0 else "üîª"
        await context.bot.send_message(
            chat_id,
            f"‚è∞ Funding update\n"
            f"üìå {sym}\n"
            f"Funding: {rate*100:.6f}% ({rate:.10f})\n"
            f"Next (Kyiv): {next_dt:%Y-%m-%d %H:%M:%S}\n"
            f"Price: ${price:,.4f}\n"
            f"24h: {arrow} {chg:.2f}%"
        )
    except Exception as e:
        # –Ω–µ –≤–±–∏–≤–∞—î–º–æ –±–æ—Ç–∞, –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –π –ª–æ–≥—É—é—î–º–æ
        logging.exception("alarm_tick error")
        try:
            await context.bot.send_message(chat_id, f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è {symbol}: {e}")
        except Exception:
            pass  # –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–µ –≤–¥–∞–ª–∞—Å—è ‚Äî –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏

async def alarm_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /alarm SYMBOL INTERVAL (–Ω–∞–ø—Ä. /alarm BTCUSDT 30m)")
        return
    symbol = context.args[0].upper()

    ok, hint = await validate_symbol(symbol)
    if not ok:
        msg = (f"‚ùå –ù–∞ Binance Futures (PERPETUAL) —Å–∏–º–≤–æ–ª **{symbol}** –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n"
               f"–ú–æ–∂–ª–∏–≤–æ, –º–æ–Ω–µ—Ç–∞ –Ω–∞ Spot (—Ñ–∞–Ω–¥—ñ–Ω–≥—É –Ω–µ–º–∞—î).")
        if hint:
            msg += f"\n–ú–æ–∂–ª–∏–≤–æ: `{hint}`"
        await update.message.reply_text(msg, parse_mode="Markdown")
        return

    seconds = parse_interval(context.args[1])
    if not seconds:
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª. –î–æ—Å—Ç—É–ø–Ω–æ: 10s, 30m, 1h")
        return

    jq = context.application.job_queue
    name = f"{update.effective_chat.id}:{symbol}"
    for j in jq.get_jobs_by_name(name):
        j.schedule_removal()

    jq.run_repeating(
        alarm_tick,
        interval=seconds,
        first=0,  # –æ–¥—Ä–∞–∑—É –ø–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        chat_id=update.effective_chat.id,
        name=name,
        data={"symbol": symbol},
    )
    logging.info(f"Alarm started: chat={update.effective_chat.id}, {symbol}, every {context.args[1]}")
    await update.message.reply_text(
        f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –∞–ª–∞—Ä–º –¥–ª—è {symbol} –∫–æ–∂–Ω—ñ {context.args[1]}.\n–ó—É–ø–∏–Ω–∫–∞: /stopalarm {symbol}"
    )

async def stopalarm_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    jq = context.application.job_queue
    if context.args:
        symbol = context.args[0].upper()
        name = f"{update.effective_chat.id}:{symbol}"
        jobs = jq.get_jobs_by_name(name)
        for j in jobs:
            j.schedule_removal()
        msg = f"üõë –ó—É–ø–∏–Ω–µ–Ω–æ –∞–ª–∞—Ä–º –¥–ª—è {symbol}." if jobs else f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–ª–∞—Ä–º—É –¥–ª—è {symbol}."
        logging.info(f"Alarm stopped: chat={update.effective_chat.id}, {symbol}")
    else:
        cnt = 0
        for j in list(jq.jobs()):
            if j.name and str(update.effective_chat.id) in j.name:
                j.schedule_removal()
                cnt += 1
        msg = f"üõë –ó—É–ø–∏–Ω–µ–Ω–æ {cnt} –∞–ª–∞—Ä–º(–∏)." if cnt else "–ê–∫—Ç–∏–≤–Ω–∏—Ö –∞–ª–∞—Ä–º—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        logging.info(f"All alarms stopped: chat={update.effective_chat.id}, count={cnt}")
    await update.message.reply_text(msg)

# ---------- TELEGRAM-–ë–û–¢ ----------
async def run_telegram_app():
    if not TELEGRAM_TOKEN:
        raise SystemExit("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–æ –≤ .env/Env Vars")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("rate", rate_cmd))
    app.add_handler(CommandHandler("alarm", alarm_cmd))
    app.add_handler(CommandHandler("stopalarm", stopalarm_cmd))

    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    logging.info("‚úÖ Telegram bot started (polling).")

    # –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–∞–ª—ñ–¥–Ω—ñ —Å–∏–º–≤–æ–ª–∏ —Ç–∞ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏ —ó—Ö —Ä–∞–∑ –Ω–∞ 6 –≥–æ–¥
    await load_futures_symbols()
    app.job_queue.run_repeating(
        lambda c: asyncio.create_task(load_futures_symbols()),
        interval=6 * 60 * 60,
        first=6 * 60 * 60,
        name="refresh_symbols"
    )

    await asyncio.Future()  # –Ω–µ –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è

# ---------- –í–ï–ë-–°–ï–†–í–ï–† –î–õ–Ø RENDER ----------
async def run_web_server():
    async def ok(_):
        return web.Response(text="OK")
    webapp = web.Application()
    webapp.router.add_get("/", ok)
    webapp.router.add_get("/healthz", ok)

    port = int(os.environ["PORT"])  # Render –∑–∞–¥–∞—î PORT
    runner = web.AppRunner(webapp)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    logging.info(f"‚úÖ Web server is listening on 0.0.0.0:{port}")
    await asyncio.Future()  # –Ω–µ –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è

# ---------- –ì–û–õ–û–í–ù–ò–ô –ó–ê–ü–£–°–ö ----------
async def main():
    # 1) –°–ø–æ—á–∞—Ç–∫—É –ø—ñ–¥—ñ–π–º–∞—î–º–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä, —â–æ–± Render –æ–¥—Ä–∞–∑—É –ø–æ–±–∞—á–∏–≤ –ø–æ—Ä—Ç
    web_task = asyncio.create_task(run_web_server())
    await asyncio.sleep(1)
    # 2) –ü–æ—Ç—ñ–º –∑–∞–ø—É—Å–∫–∞—î–º–æ Telegram-–±–æ—Ç–∞
    await run_telegram_app()
    await web_task

if __name__ == "__main__":
    asyncio.run(main())
